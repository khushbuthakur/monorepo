{"version":3,"sources":["logo.svg","../../shared/core/src/time.js","../../shared/core/src/constants/index.js","../../shared/theme/src/constants/index.js","../../shared/core/src/posts.js","components/Posts.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","dayjs","require","setInterval","format","CONSTS","ROUTES","FETCH_USERS","BASE_URL","THEME","COLORS","PRIMARY_COLOR","SECONDARY_COLOR","FONTS","LARGE","MEDIUM","SMALL","API","fetchPost","a","fetch","response","json","Posts","posts","map","item","id","title","body","key","App","useState","setPosts","useEffect","data","className","src","logo","alt","href","target","rel","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,kC,0MCArCC,G,MAAQC,EAAQ,KAWVC,aAAY,kBAAOF,IAAQG,OAAO,yBAA0B,QAAxE,ICAeC,EALA,CACXC,OALW,CACXC,YAAcC,qCAKdA,SARa,0BCgBFC,EALD,CACVC,OAZW,CACXC,cAAe,UACfC,gBAAiB,WAWjBC,MARU,CACVC,MAAQ,GACRC,OAAS,GACTC,MAAQ,KCCGC,EAJH,CACRC,UANW,uCAAG,4BAAAC,EAAA,sEACOC,MAAM,8CADb,cACVC,EADU,yBAEPA,EAASC,QAFF,2CAAH,sDCkBAC,MAhBf,YAAyB,IAATC,EAAQ,EAARA,MACd,OACE,4BACGA,EAAMC,KAAI,SAAAC,GAAS,IACbC,EAAmBD,EAAnBC,GAAIC,EAAeF,EAAfE,MAAOC,EAAQH,EAARG,KAChB,OACE,wBAAIC,IAAKH,GACP,4BAAKC,GACL,2BAAIC,SC2CDE,EA3CH,WAAO,IAAD,EAEUC,mBAAS,IAFnB,mBAETR,EAFS,KAEFS,EAFE,KAIhBC,qBAAU,WACRhB,MACC,IAEH,IAAMA,EAAS,uCAAG,4BAAAC,EAAA,sEACCF,EAAIC,YADL,OACZiB,EADY,OAEhBF,EAASE,GAFO,2CAAH,qDAKf,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SAEzC,mCACO,4CADP,wBAGA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,eASA,2BLpCGzC,IAAQG,OAAO,2BKsClB,2BAAIC,EAAOG,UAEX,2BAAIC,EAAMC,OAAOC,gBAGlBa,EAAMmB,OAAS,GAAK,kBAAC,EAAD,CAAOnB,MAAOA,MCnCrBoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9ef6c238.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const dayjs = require(\"dayjs\");\nlet timerId;\n\nfunction getCurrentTime() {\n    return dayjs().format('D MMM, YYYY : HH:mm:ss');\n}\n\nfunction stopTimer() {\n    clearInterval(timerId);\n}\n\nlet timer = setInterval(() => (dayjs().format('D MMM, YYYY : HH:mm:ss', 1000)));\n\n        export {\n            getCurrentTime,\n            stopTimer,\n            timer\n        };","const BASE_URL = 'http://localhost:7001/';\n\nconst ROUTES = {\n    FETCH_USERS : BASE_URL + 'fetch-users'\n};\n\nconst CONSTS = {\n    ROUTES,\n    BASE_URL\n};\n\nexport default CONSTS;","const COLORS = {\n    PRIMARY_COLOR: '#333333',\n    SECONDARY_COLOR: '#fafafa'\n}\n\nconst FONTS = {\n    LARGE : 20,\n    MEDIUM : 16,\n    SMALL : 12\n};\n\nconst THEME = {\n    COLORS,\n    FONTS\n};\n\nexport default THEME;","const fetchPost = async() =>{\n    let response = await fetch('https://jsonplaceholder.typicode.com/posts');\n    return response.json();\n} \n\nconst API = {\n    fetchPost\n};\n\nexport default API;","import React from 'react'\n\nfunction Posts({posts}) {\n  return (\n    <ol>\n      {posts.map(item => {\n        let {id, title, body} = item;\n        return (\n          <li key={id}>\n            <h5>{title}</h5>\n            <p>{body}</p>\n          </li>\n        )\n      })}\n    </ol>\n  )\n}\n\nexport default Posts\n","import React, {useState, useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n// import CORE_CONSTANTS from '@monorepo-local/core/constants';\nimport { getCurrentTime } from '@monorepo/shared/core/src/time';\nimport CONSTS from '@monorepo/shared/core/src/constants';\nimport THEME from '@monorepo/shared/theme/src/constants';\nimport API from '@monorepo/shared/core/src/posts';\nimport Posts from './components/Posts';\n\nconst App = () => {\n\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    fetchPost();\n  }, []);\n\n  const fetchPost = async() =>{\n    let data = await API.fetchPost();\n    setPosts(data);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        {/* {CORE_CONSTANTS.BASE_URL} */}\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n\n        <p>{getCurrentTime()}</p>\n\n        <p>{CONSTS.BASE_URL}</p>\n\n        <p>{THEME.COLORS.PRIMARY_COLOR}</p>\n      </header>\n\n      {posts.length > 0 && <Posts posts={posts}/>}\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}